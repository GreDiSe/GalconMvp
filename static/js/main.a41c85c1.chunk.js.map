{"version":3,"sources":["app/enums.ts","app/circle/Circle.tsx","app/utils.ts","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Statuses","Circle","x","y","status","value","onClick","selected","radius","cx","cy","r","stroke","strokeWidth","fill","NEUTRALS","dy","textAnchor","generateCircle","randomInteger","setPlayerCircle","gameList","maxValue","Math","max","map","c","playerCircle","find","PLAYERS","isCircleInStaticRadius","newX","newY","some","circle","min","rand","random","round","init","numberOfCircle","k","initialField","push","generateField","App","useState","gameData","setGameData","selectedIndex","setSelectedIndex","isWin","setIsWin","onPlayerClicked","useCallback","clickedIndex","newGameData","useEffect","every","info","interval","setInterval","data","clearInterval","className","height","width","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a41c85c1.chunk.js","sourcesContent":["export enum Statuses {\r\n    NEUTRALS,\r\n    PLAYERS\r\n}","import React from 'react';\r\nimport {Statuses} from \"../enums\";\r\n\r\ninterface Props {\r\n    x: number,\r\n    y: number,\r\n    value: number,\r\n    onClick(): void,\r\n    status: Statuses,\r\n    selected: boolean\r\n}\r\n\r\nfunction Circle({x,y, status, value, onClick, selected}: Props) {\r\n    let radius = value / 2;\r\n    if(radius < 25) radius = 25;\r\n    if(radius > 100) radius = 100;\r\n\r\n    return (\r\n        <g onClick={onClick}>\r\n            <circle\r\n                cx={x}\r\n                cy={y}\r\n                r={radius}\r\n                stroke={selected ? 'green' : 'black'}\r\n                strokeWidth=\"3\"\r\n                fill={status === Statuses.NEUTRALS ? 'grey' : 'limegreen'}\r\n            />\r\n            <text\r\n                dy=\".3em\"\r\n                x={x}\r\n                y={y}\r\n                textAnchor=\"middle\"\r\n                stroke=\"black\"\r\n                strokeWidth=\"1px\"\r\n            >\r\n                {value}\r\n            </text>\r\n        </g>\r\n    );\r\n}\r\n\r\nexport default Circle;\r\n","import {Statuses} from \"./enums\";\r\nimport {GameInfo, GameInfoItem} from \"../types\";\r\n\r\nexport const checkIsWin = (list: GameInfo): boolean =>\r\n    list.every(info => info.status === Statuses.PLAYERS)\r\n\r\nexport const generateField = (): GameInfo => {\r\n    const numberOfCircle = randomInteger(5, 8);\r\n    let k = 0;\r\n    const initialField: GameInfo = [];\r\n\r\n    while(numberOfCircle > k) {\r\n        const circle = generateCircle();\r\n\r\n        if(!isCircleInStaticRadius(initialField, circle.x, circle.y)) {\r\n            k++;\r\n            initialField.push(circle);\r\n        }\r\n    }\r\n\r\n\r\n    return setPlayerCircle(initialField);\r\n}\r\n\r\nconst generateCircle = (): GameInfoItem => {\r\n    return ({\r\n        x: randomInteger(100, 900),\r\n        y: randomInteger(100, 550),\r\n        value: randomInteger(20, 130),\r\n        status: Statuses.NEUTRALS\r\n    })\r\n}\r\n\r\nconst setPlayerCircle = (gameList: GameInfo): GameInfo => {\r\n    const maxValue = Math.max(...gameList.map(c => c.value));\r\n    const playerCircle = gameList.find(c => c.value === maxValue);\r\n    if(playerCircle) {\r\n        playerCircle.status = Statuses.PLAYERS;\r\n    } else {\r\n        gameList[0].status = Statuses.PLAYERS;\r\n    }\r\n\r\n    return gameList;\r\n}\r\n\r\nconst isCircleInStaticRadius = (gameList: GameInfo, newX: number, newY: number): boolean =>\r\n    gameList.some(circle =>\r\n        circle.x + 130 > newX && circle.x - 130 < newX && circle.y + 130 > newY && circle.y - 130 < newY\r\n    )\r\n\r\n\r\nexport const randomInteger = (min: number, max: number): number => {\r\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    return Math.round(rand);\r\n}","import React, {useCallback, useEffect, useState} from 'react';\r\n\r\nimport './App.css';\r\nimport Circle from './circle/Circle'\r\nimport {Statuses} from \"./enums\";\r\nimport {initialState} from \"../data\";\r\nimport {GameInfo} from \"../types\";\r\nimport {checkIsWin, generateField} from \"./utils\";\r\n\r\nconst SUCCESS_MESSAGE = 'You win';\r\nconst init = generateField();\r\n\r\nfunction App() {\r\n    const [gameData, setGameData] = useState<GameInfo>(init);\r\n    const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\r\n    const [isWin, setIsWin] = useState<boolean>(false);\r\n\r\n    const onPlayerClicked = useCallback((clickedIndex: number): void => {\r\n        if(selectedIndex === null) return;\r\n\r\n        setGameData(gameData => {\r\n            const newGameData = [...gameData];\r\n            newGameData[clickedIndex] = {\r\n                ...newGameData[clickedIndex],\r\n                value: gameData[selectedIndex].value + gameData[clickedIndex].value\r\n            }\r\n\r\n            newGameData[selectedIndex] = {\r\n                ...newGameData[selectedIndex],\r\n                value: 0\r\n            };\r\n\r\n            return newGameData\r\n        })\r\n        setSelectedIndex(null);\r\n    }, [selectedIndex, gameData])\r\n\r\n    const onClick = useCallback((clickedIndex: number) => (): void => {\r\n        if(selectedIndex === null) {\r\n            if(gameData[clickedIndex].status === Statuses.PLAYERS)\r\n                setSelectedIndex(clickedIndex);\r\n        } else {\r\n            if(gameData[clickedIndex].status === Statuses.PLAYERS) {\r\n                onPlayerClicked(clickedIndex);\r\n            } else if(clickedIndex === selectedIndex\r\n                || gameData[selectedIndex].value - gameData[clickedIndex].value < 0\r\n            ) {\r\n                setSelectedIndex(null);\r\n            } else {\r\n                setGameData(gameData => {\r\n                    const newGameData = [...gameData];\r\n                    newGameData[clickedIndex] = {\r\n                        ...newGameData[clickedIndex],\r\n                        status: Statuses.PLAYERS,\r\n                        value: gameData[selectedIndex].value - gameData[clickedIndex].value\r\n                    };\r\n\r\n                    newGameData[selectedIndex] = {\r\n                        ...newGameData[selectedIndex],\r\n                        value: 0\r\n                    };\r\n\r\n                    return newGameData;\r\n                })\r\n                setSelectedIndex(null);\r\n            }\r\n        }\r\n    }, [gameData, selectedIndex])\r\n\r\n    useEffect(() => {\r\n        if(!isWin && checkIsWin(gameData)) {\r\n            setIsWin(true)\r\n        }\r\n    }, [gameData, isWin]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setGameData(gameData => gameData.map(data => {\r\n                    if(data.status === Statuses.NEUTRALS) return data;\r\n\r\n                    return ({\r\n                        ...data,\r\n                        value: data.value + 1\r\n                    })\r\n                }\r\n            ))\r\n        }, 300)\r\n\r\n        if(isWin) {\r\n            clearInterval(interval)\r\n        }\r\n\r\n        return () => clearInterval(interval);\r\n    }, [isWin])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <svg height=\"650\" width=\"1000\">\r\n                {isWin && (\r\n                    <text\r\n                        dy=\".3em\"\r\n                        x='50%'\r\n                        y='30'\r\n                        textAnchor=\"middle\"\r\n                        stroke=\"black\"\r\n                        strokeWidth=\"1px\"\r\n                    >\r\n                        {SUCCESS_MESSAGE}\r\n                    </text>\r\n                )}\r\n                {gameData.map((circle, index) =>\r\n                    <Circle\r\n                        key={index}\r\n                        onClick={onClick(index)}\r\n                        selected={selectedIndex === index}\r\n                        {...circle}\r\n                    />\r\n                )}\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}